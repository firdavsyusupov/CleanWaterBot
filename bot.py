import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from telegram.error import TimedOut, NetworkError, TelegramError

from config import config
from database import Database
from utils import setup_logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    SELECTING_LANGUAGE,
    MAIN_MENU,
    VIEWING_PRODUCTS,
    CART,
    CHECKOUT,
    CHECKOUT_NAME,
    CHECKOUT_PHONE,
    CHECKOUT_ADDRESS,
    ADMIN_MENU,
    ADMIN_ADD_PRODUCT,
    ADMIN_EDIT_PRODUCT,
    ADMIN_VIEW_ORDERS,
    ADMIN_WAIT_PHOTO,
    EDIT_PRODUCT_SELECT,
    EDIT_PRODUCT_ACTION,
    EDIT_PRODUCT_INPUT,
    EDIT_PRODUCT_CONFIRM_DELETE
) = range(17)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = config.ADMIN_IDS



class EcommerceBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = config.BOT_TOKEN
        self.db = Database()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.locales = {}
        self._load_locales()
        
        logging.info("Bot initialized successfully")

    def _load_locales(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            locales_dir = os.path.join(os.path.dirname(__file__), 'locales')
            logging.info(f"Loading locales from: {locales_dir}")
            
            for filename in os.listdir(locales_dir):
                if filename.endswith('.json'):
                    language = filename.split('.')[0]
                    file_path = os.path.join(locales_dir, filename)
                    logging.info(f"Loading locale file: {file_path}")
                    
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.locales[language] = json.load(f)
                    logging.info(f"Successfully loaded locale: {language}")
            
            logging.info(f"Available locales: {list(self.locales.keys())}")
        except Exception as e:
            logging.error(f"Error loading locales: {str(e)}")
            raise

    def get_text(self, language: str, key: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            return self.locales[language][key]
        except KeyError:
            logging.error(f"Missing translation key: {key} for language: {language}")
            return f"Missing translation: {key}"
# """
#     async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
#         –ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
#         user_id = update.effective_user.id
        
#         try:
#             # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#             user = self.db.get_user(user_id)
#             if user and user.language:
#                 # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
#                 context.user_data['language'] = user.language
#                 return await self.show_main_menu(update, context)
#         except Exception as e:
#             logging.error(f"Error getting user language: {str(e)}")
        
#         # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
#         keyboard = [
#             [
#                 InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru'),
#                 InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data='uz')
#             ]
#         ]
#         reply_markup = InlineKeyboardMarkup(keyboard)
#         await update.message.reply_text(
#             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
#             reply_markup=reply_markup
#         )
#         return SELECTING_LANGUAGE
# """

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        user_id = update.effective_user.id
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = self.db.get_user(user_id)
            if user and user.language:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                context.user_data['language'] = user.language
                return await self.show_main_menu(update, context)
        except Exception as e:
            logging.error(f"Error getting user language: {str(e)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        language = context.user_data.get('language', 'uz')  # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç 'en'
        hello_text = self.get_text(language, "hello")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(hello_text)
        
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        keyboard = [
            [
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru'),
                InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data='uz')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
            reply_markup=reply_markup
        )
        return SELECTING_LANGUAGE

    async def select_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        language = query.data
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ context.user_data
        context.user_data['language'] = language
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db.set_language(user_id, language)
            logging.info(f"User {user_id} selected language: {language}")
        except Exception as e:
            logging.error(f"Error saving language preference: {str(e)}")
            await query.message.reply_text(self.get_text(language, 'error_message'))
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            language = context.user_data.get('language', 'ru')
            user_id = update.effective_user.id
            
            logging.info(f"Showing main menu for user {user_id} with language {language}")
            logging.info(f"Admin IDs: {config.ADMIN_IDS}")
            logging.info(f"Is user admin? {user_id in config.ADMIN_IDS}")
            
            keyboard = [
                [
                    KeyboardButton(self.get_text(language, "products")),
                    KeyboardButton(self.get_text(language, "cart"))
                ],
                [
                    KeyboardButton(self.get_text(language, "orders")),
                    KeyboardButton(self.get_text(language, "settings"))
                ]
            ]
            
            if user_id in config.ADMIN_IDS:
                logging.info(f"Adding admin button for user {user_id}")
                keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            text = self.get_text(language, "main_menu_text")
            
            logging.info("Sending main menu message")
            
            if update.callback_query:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
            
            logging.info("Returning MAIN_MENU state")
            return MAIN_MENU
            
        except Exception as e:
            logging.error(f"Error showing main menu: {str(e)}")
            if update.callback_query:
                await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            else:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return ConversationHandler.END

    async def handle_menu_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
        try:
            language = context.user_data.get('language', 'ru')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if update.callback_query:
                text = update.callback_query.data.strip()
                message = update.callback_query.message
            else:
                text = update.message.text.strip()
                message = update.message
            
            user_id = update.effective_user.id
            
            logging.info(f"handle_menu_selection called with text: '{text}', language: {language}, user_id: {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            products_text = self.get_text(language, "products").strip()
            cart_text = self.get_text(language, "cart").strip()
            orders_text = self.get_text(language, "orders").strip()
            settings_text = self.get_text(language, "settings").strip()
            clear_cart_text = self.get_text(language, "clear_cart").strip()
            back_to_menu_text = self.get_text(language, "back_to_menu").strip()
            checkout_text = self.get_text(language, "checkout").strip()

            logging.info(f"Comparing with: products='{products_text}', cart='{cart_text}', orders='{orders_text}', settings='{settings_text}'")
            
            if text == products_text:
                logging.info("Products button pressed")
                products = self.db.get_products()
                if not products:
                    await message.reply_text(self.get_text(language, "no_products"))
                else:
                    for product in products:
                        caption = f"{product['name_' + language]}\n"
                        caption += f"{product['description_' + language]}\n"
                        caption += f"{self.get_text(language, 'price')}: {product['price']} {self.get_text(language, 'currency')}"
                        
                        # Get current quantity from database
                        cart_items = self.db.get_cart(user_id)
                        current_quantity = 0
                        for item in cart_items:
                            if str(item['product_id']) == str(product['id']):
                                current_quantity = item['quantity']
                                break
                        
                        keyboard = [
                            [
                                InlineKeyboardButton("‚ûñ", callback_data=f"decrease_{product['id']}"),
                                InlineKeyboardButton(f"{current_quantity}", callback_data="quantity"),
                                InlineKeyboardButton("‚ûï", callback_data=f"increase_{product['id']}")
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await message.reply_photo(
                            photo=product['photo_id'],
                            caption=caption,
                            reply_markup=reply_markup
                        )
                return VIEWING_PRODUCTS
                
            # elif text == cart_text:
            #     logging.info("Cart button pressed")
            #     cart = self.db.get_cart(user_id)
            #     if not cart:
            #         await message.reply_text(self.get_text(language, "cart_empty"))
            #     else:
            #         cart_text = f"{self.get_text(language, 'cart_header')}\n\n"
            #         total = 0
            #         for item in cart:
            #             subtotal = item['price'] * item['quantity']
            #             total += subtotal
            #             cart_text += f"{item['name']} x{item['quantity']} = {subtotal} {self.get_text(language, 'currency')}\n"
            #         cart_text += f"\n{self.get_text(language, 'total')}: {total} {self.get_text(language, 'currency')}"
                    
            #         keyboard = [
            #             [KeyboardButton(self.get_text(language, "checkout"))],
            #             [KeyboardButton(self.get_text(language, "clear_cart"))],
            #             [KeyboardButton(self.get_text(language, "back_to_menu"))]
            #         ]
            #         reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            #         await message.reply_text(cart_text, reply_markup=reply_markup)
            #     return CART
            elif text == cart_text:
                logging.info("Cart button pressed")
                cart = self.db.get_cart(user_id)
                user = self.db.get_user(user_id)
                if not cart:
                    await message.reply_text(self.get_text(language, "cart_empty"))
                else:
                    cart_text = f"{self.get_text(language, 'cart_header')}\n\n"
                    bonus_text = ""
                    total = 0
                    for item in cart:
                        subtotal = item['price'] * item['quantity']
                        total += subtotal
                        cart_text += f"{item['name']} x{item['quantity']} = {subtotal} {self.get_text(language, 'currency')}\n"
                        if user.is_first_usage and item['is_promo']:
                            bonus_text += f"{item['name']} x2 = 0 {self.get_text(language, 'currency')}\n"

                        elif item['is_promo'] and item['quantity'] >= 5:
                            quantity = item['quantity'] // 5
                            bonus_text += f"{item['name']} x{quantity} = 0 {self.get_text(language, 'currency')}\n"
                        
                    
                    if user.is_first_usage and bonus_text:
                        cart_text += "\nBonus:\n"
                        cart_text += bonus_text
                    elif bonus_text:
                        cart_text += "\nBonus:\n"
                        cart_text += bonus_text

                    cart_text += f"\n{self.get_text(language, 'total')}: {total} {self.get_text(language, 'currency')}"

                    keyboard = [
                        [KeyboardButton(self.get_text(language, "checkout"))],
                        [KeyboardButton(self.get_text(language, "clear_cart"))],
                        [KeyboardButton(self.get_text(language, "back_to_menu"))]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await message.reply_text(cart_text, reply_markup=reply_markup)
                return CART
                
            elif text == clear_cart_text:
                logging.info("Clear cart button pressed")
                try:
                    self.db.clear_cart(user_id)
                    await message.reply_text(self.get_text(language, "cart_empty"))
                    return await self.show_main_menu(update, context)
                except Exception as e:
                    logging.error(f"Error clearing cart: {str(e)}")
                    await message.reply_text(self.get_text(language, "error_message"))
                return CART
                
            elif text == back_to_menu_text:
                logging.info("Back to menu button pressed")
                return await self.show_main_menu(update, context)
                
            elif text == checkout_text:
                logging.info("Checkout button pressed")
                cart = self.db.get_cart(user_id)
                if not cart:
                    await message.reply_text(self.get_text(language, "cart_empty"))
                    return CART
                return await self.start_checkout(update, context)
                
            elif text == orders_text:
                logging.info("Orders button pressed")
                orders = self.db.get_user_orders(user_id)
                if not orders:
                    await message.reply_text(self.get_text(language, "no_orders"))
                else:
                    orders_text = ""
                    for order in orders:
                        status = self.get_text(language, f"status_{order['status']}")
                        orders_text += self.get_text(language, "order_info").format(
                            order_id=order['id'],
                            status=status,
                            date = datetime.strptime(order['created_at'], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")

                        ) + "\n\n"
                    await message.reply_text(orders_text)
                return await self.show_main_menu(update, context)
                
            elif text == settings_text:
                logging.info("Settings button pressed")
                keyboard = [
                    [
                        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru'),
                        InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data='uz')
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
                    reply_markup=reply_markup
                )
                return SELECTING_LANGUAGE
                
            elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
                logging.info("Admin panel button pressed")
                if user_id in config.ADMIN_IDS:
                    keyboard = [
                        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
                        [KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")],
                        [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤")],
                        [KeyboardButton(self.get_text(language, "back_to_menu"))]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
                    return ADMIN_MENU
                else:
                    logging.warning(f"Unauthorized access attempt to admin panel by user {user_id}")
                    await message.reply_text(self.get_text(language, "error_message"))
                    return await self.show_main_menu(update, context)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            logging.warning(f"Unknown menu selection: {text}")
            await message.reply_text(self.get_text(language, "error_message"))
            return await self.show_main_menu(update, context)
            
        except Exception as e:
            logging.error(f"Error in handle_menu_selection: {str(e)}", exc_info=True)
            await message.reply_text(self.get_text(language, "error_message"))
            return await self.show_main_menu(update, context)

    async def handle_product_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)"""
        query = update.callback_query
        await query.answer()
        
        language = context.user_data.get('language', 'ru')
        user_id = update.effective_user.id
        
        logging.info(f"Processing product button. User: {user_id}, Data: {query.data}")
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º callback_data
            if '_' not in query.data:
                logging.error(f"Invalid callback data format: {query.data}")
                await query.message.reply_text(self.get_text(language, "error_message"))
                return VIEWING_PRODUCTS
                
            action, product_id_str = query.data.split('_')
            logging.info(f"Action: {action}, Product ID: {product_id_str}")
            
            try:
                product_id = int(product_id_str)
            except ValueError:
                logging.error(f"Invalid product_id: {product_id_str}")
                await query.message.reply_text(self.get_text(language, "error_message"))
                return VIEWING_PRODUCTS
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            product = self.db.get_product(product_id)
            if not product:
                logging.error(f"Product not found: {product_id}")
                await query.message.reply_text(self.get_text(language, "error_message"))
                return VIEWING_PRODUCTS
            
            logging.info(f"Found product: {product}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
            cart_items = self.db.get_cart(user_id)
            logging.info(f"Current cart items: {cart_items}")
            
            if action == 'increase':
                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º 1 –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                self.db.add_to_cart(user_id, product_id, 1)
                logging.info(f"Added product {product_id} to cart for user {user_id}")
            elif action == 'decrease':
                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
                cart_item = None
                for item in cart_items:
                    if int(item['product_id']) == product_id:
                        cart_item = item
                        break
                
                logging.info(f"Found cart item: {cart_item}")
                
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0, —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1
                if cart_item and cart_item['quantity'] > 0:
                    new_quantity = cart_item['quantity'] - 1
                    self.db.update_cart_item(user_id, cart_item['id'], new_quantity)
                    logging.info(f"Decreased quantity to {new_quantity} for product {product_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_items = self.db.get_cart(user_id)
            updated_quantity = 0
            for item in cart_items:
                if int(item['product_id']) == product_id:
                    updated_quantity = item['quantity']
                    break
            
            logging.info(f"Updated quantity: {updated_quantity}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            caption = f"{product['name_' + language]}\n"
            caption += f"{product['description_' + language]}\n"
            caption += f"{self.get_text(language, 'price')}: {product['price']} {self.get_text(language, 'currency')}"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûñ", callback_data=f"decrease_{product_id}"),
                    InlineKeyboardButton(f"{updated_quantity}", callback_data="quantity"),
                    InlineKeyboardButton("‚ûï", callback_data=f"increase_{product_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_caption(
                caption=caption,
                reply_markup=reply_markup
            )
            logging.info("Successfully updated product message")
            
        except Exception as e:
            logging.error(f"Error in handle_product_button: {str(e)}", exc_info=True)
            await query.message.reply_text(self.get_text(language, "error_message"))
        
        return VIEWING_PRODUCTS

    async def show_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        try:
            user_id = update.effective_user.id
            language = context.user_data.get('language', 'ru')
            
            if user_id not in config.ADMIN_IDS:
                logging.warning(f"Unauthorized access attempt to admin menu by user {user_id}")
                await update.message.reply_text(self.get_text(language, "error_message"))
                return await self.show_main_menu(update, context)
            
            keyboard = [
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
                [KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")],
                [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤")],
                [KeyboardButton(self.get_text(language, "back_to_menu"))]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return ADMIN_MENU
            
        except Exception as e:
            logging.error(f"Error showing admin menu: {str(e)}", exc_info=True)
            await update.message.reply_text(self.get_text(language, "error_message"))
            return await self.show_main_menu(update, context)

    async def handle_add_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            user_id = update.effective_user.id
            text = update.message.text.strip()
            language = context.user_data.get('language', 'ru')
            
            logging.info(f"Adding product. User: {user_id}, Text: {text}")

            if text == "–ù–∞–∑–∞–¥":
                return ADMIN_MENU
            
            if user_id not in config.ADMIN_IDS:
                logging.warning(f"Unauthorized access attempt to add product by user {user_id}")
                await update.message.reply_text(self.get_text(language, "error_message"))
                return await self.show_main_menu(update, context)
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            lines = text.split('\n')
            if len(lines) < 5:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 5 —Å—Ç—Ä–æ–∫:\n–ù–∞–∑–≤–∞–Ω–∏–µ RU\n–ù–∞–∑–≤–∞–Ω–∏–µ UZ\n–û–ø–∏—Å–∞–Ω–∏–µ RU\n–û–ø–∏—Å–∞–Ω–∏–µ UZ\n–¶–µ–Ω–∞")
                return ADMIN_ADD_PRODUCT
            
            name_ru = lines[0].strip()
            name_uz = lines[1].strip()
            description_ru = lines[2].strip()
            description_uz = lines[3].strip()
            
            try:
                price = int(lines[4].strip())
            except ValueError:
                await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return ADMIN_ADD_PRODUCT
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            context.user_data['temp_product'] = {
                'name_ru': name_ru,
                'name_uz': name_uz,
                'description_ru': description_ru,
                'description_uz': description_uz,
                'price': price
            }
            
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞")
            return ADMIN_WAIT_PHOTO
            
        except Exception as e:
            logging.error(f"Error in handle_add_product: {str(e)}", exc_info=True)
            await update.message.reply_text(self.get_text(language, "error_message"))
            return await self.show_main_menu(update, context)
            
    async def handle_product_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            user_id = update.effective_user.id
            language = context.user_data.get('language', 'ru')
            
            logging.info(f"Processing product photo. User: {user_id}")
            
            if user_id not in config.ADMIN_IDS:
                logging.warning(f"Unauthorized access attempt to add product photo by user {user_id}")
                await update.message.reply_text(self.get_text(language, "error_message"))
                return await self.show_main_menu(update, context)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
            temp_product = context.user_data.get('temp_product')
            if not temp_product:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")
                return ADMIN_ADD_PRODUCT
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            photo = update.message.photo[-1]
            temp_product['photo_id'] = photo.file_id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                self.db.add_product(
                    name_ru=temp_product['name_ru'],
                    name_uz=temp_product['name_uz'],
                    description_ru=temp_product['description_ru'],
                    description_uz=temp_product['description_uz'],
                    price=temp_product['price'],
                    photo_id=temp_product['photo_id']
                )
                await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except Exception as e:
                logging.error(f"Error adding product to database: {str(e)}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('temp_product', None)
            
            return await self.show_admin_menu(update, context)
            
        except Exception as e:
            logging.error(f"Error in handle_product_photo: {str(e)}", exc_info=True)
            await update.message.reply_text(self.get_text(language, "error_message"))
            return await self.show_main_menu(update, context)
            
    async def start_checkout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        text = update.message.text
        language = context.user_data.get('language', 'ru')
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart = self.db.get_cart(user_id)
        if not cart:
            await update.message.reply_text(self.get_text(language, "cart_empty"))
            return CART
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É"
        keyboard = [[KeyboardButton(self.get_text(language, "back_to_cart"))]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            self.get_text(language, "enter_name"),
            reply_markup=reply_markup
        )
        return CHECKOUT_NAME

    async def handle_checkout_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = update.message.text
        language = context.user_data.get('language', 'ru')
        
        if text == self.get_text(language, "back_to_cart"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart_items = self.db.get_cart(update.effective_user.id)
            if not cart_items:
                await update.message.reply_text(self.get_text(language, "cart_empty"))
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
                total = sum(item['price'] * item['quantity'] for item in cart_items)
                cart_text = f"{self.get_text(language, 'cart_header')}:\n\n"
                for item in cart_items:
                    cart_text += f"{item['name']} x{item['quantity']} = {item['price'] * item['quantity']} {self.get_text(language, 'currency')}\n"
                cart_text += f"\n{self.get_text(language, 'total')}: {total} {self.get_text(language, 'currency')}"
                
                keyboard = [
                    [KeyboardButton(self.get_text(language, "checkout"))],
                    [KeyboardButton(self.get_text(language, "clear_cart"))],
                    [KeyboardButton(self.get_text(language, "back_to_menu"))]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(cart_text, reply_markup=reply_markup)
            return CART
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        context.user_data['checkout_name'] = text
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = [
            [KeyboardButton(self.get_text(language, "share_contact"), request_contact=True)],
            [KeyboardButton(self.get_text(language, "back_to_cart"))]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            self.get_text(language, "enter_phone"),
            reply_markup=reply_markup
        )
        return CHECKOUT_PHONE

    async def handle_checkout_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        language = context.user_data.get('language', 'ru')
        
        if update.message.text == self.get_text(language, "back_to_cart"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart_items = self.db.get_cart(update.effective_user.id)
            if not cart_items:
                await update.message.reply_text(self.get_text(language, "cart_empty"))
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
                total = sum(item['price'] * item['quantity'] for item in cart_items)
                cart_text = f"{self.get_text(language, 'cart_header')}:\n\n"
                for item in cart_items:
                    cart_text += f"{item['name']} x{item['quantity']} = {item['price'] * item['quantity']} {self.get_text(language, 'currency')}\n"
                cart_text += f"\n{self.get_text(language, 'total')}: {total} {self.get_text(language, 'currency')}"
                
                keyboard = [
                    [KeyboardButton(self.get_text(language, "checkout"))],
                    [KeyboardButton(self.get_text(language, "clear_cart"))],
                    [KeyboardButton(self.get_text(language, "back_to_menu"))]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(cart_text, reply_markup=reply_markup)
            return CART
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        context.user_data['checkout_phone'] = phone
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
        keyboard = [
            [KeyboardButton(self.get_text(language, "share_location"), request_location=True)],
            [KeyboardButton(self.get_text(language, "back_to_cart"))]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            self.get_text(language, "enter_address"),
            reply_markup=reply_markup
        )
        return CHECKOUT_ADDRESS

    async def handle_checkout_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            language = context.user_data.get('language', 'ru')
            user_id = update.effective_user.id
            
            if update.message.text and update.message.text == self.get_text(language, "back_to_cart"):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                cart_items = self.db.get_cart(user_id)
                if not cart_items:
                    await update.message.reply_text(self.get_text(language, "cart_empty"))
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
                    total = sum(item['price'] * item['quantity'] for item in cart_items)
                    cart_text = f"{self.get_text(language, 'cart_header')}:\n\n"
                    for item in cart_items:
                        cart_text += f"{item['name']} x{item['quantity']} = {item['price'] * item['quantity']} {self.get_text(language, 'currency')}\n"
                    cart_text += f"\n{self.get_text(language, 'total')}: {total} {self.get_text(language, 'currency')}"
                    
                    keyboard = [
                        [KeyboardButton(self.get_text(language, "checkout"))],
                        [KeyboardButton(self.get_text(language, "clear_cart"))],
                        [KeyboardButton(self.get_text(language, "back_to_menu"))]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(cart_text, reply_markup=reply_markup)
                return CART
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart = self.db.get_cart(user_id)
            if not cart:
                logging.warning(f"Empty cart for user {user_id}")
                await update.message.reply_text(self.get_text(language, "cart_empty"))
                return CART
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
            name = context.user_data.get('checkout_name')
            phone = context.user_data.get('checkout_phone')
            
            if not name or not phone:
                logging.error(f"Missing checkout data. Name: {name}, Phone: {phone}")
                await update.message.reply_text(self.get_text(language, "error_message"))
                return CART
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é
            address = ""
            if update.message.location:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é
                location = update.message.location
                address = f"latitude: {location.latitude}, longitude: {location.longitude}"
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
                address = update.message.text
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_data = {
                'user_id': user_id,
                'name': name,
                'phone': phone,
                'address': address
            }
            
            try:
                order_id = self.db.create_order(order_data)
                logging.info(f"Order created successfully: {order_id}")
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                context.user_data.pop('checkout_name', None)
                context.user_data.pop('checkout_phone', None)
                
                await update.message.reply_text(
                    self.get_text(language, "order_created").format(order_id=order_id)
                )
                return await self.show_main_menu(update, context)
                
            except Exception as e:
                logging.error(f"Error creating order: {str(e)}", exc_info=True)
                await update.message.reply_text(self.get_text(language, "error_message"))
                return CART
                
        except Exception as e:
            logging.error(f"Error in handle_checkout_address: {str(e)}", exc_info=True)
            await update.message.reply_text(self.get_text(language, "error_message"))
            return CART

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logging.error(f"Update {update} caused error {context.error}")
        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        try:
            user_id = update.effective_user.id
            text = update.message.text.strip()
            language = context.user_data.get('language', 'ru')
            
            logging.info(f"Admin menu selection: {text}")
            
            if user_id not in config.ADMIN_IDS:
                logging.warning(f"Unauthorized access attempt to admin menu by user {user_id}")
                await update.message.reply_text(self.get_text(language, "error_message"))
                return await self.show_main_menu(update, context)
            
            if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                    "–ù–∞–∑–≤–∞–Ω–∏–µ RU\n"
                    "–ù–∞–∑–≤–∞–Ω–∏–µ UZ\n"
                    "–û–ø–∏—Å–∞–Ω–∏–µ RU\n"
                    "–û–ø–∏—Å–∞–Ω–∏–µ UZ\n"
                    "–¶–µ–Ω–∞"
                )
                return ADMIN_ADD_PRODUCT
                
            elif text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä":
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
                products = self.db.get_products()
                if not products:
                    await update.message.reply_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return ADMIN_MENU
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                keyboard = []
                for product in products:
                    keyboard.append([KeyboardButton(f"üìù {product['name_ru']} - {product['price']} —Å—É–º")])
                keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
                return EDIT_PRODUCT_SELECT
                
            elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤":
                orders = self.db.get_all_orders()
                if not orders:
                    await update.message.reply_text("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return ADMIN_MENU
                
                for order in orders:
                    order_text = (
                        f"–ó–∞–∫–∞–∑ #{order['id']}\n"
                        f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                        f"–ö–ª–∏–µ–Ω—Ç: {order['name']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                        f"–ê–¥—Ä–µ—Å: {order['address']}\n"
                        f"–¢–æ–≤–∞—Ä—ã:\n"
                    )
                    
                    total = 0
                    for item in order['items']:
                        price = item['price'] * item['quantity']
                        total += price
                        order_text += f"- {item['name']} x{item['quantity']} = {price} —Å—É–º\n"
                    
                    order_text += f"\n–ò—Ç–æ–≥–æ: {total} —Å—É–º"
                    await update.message.reply_text(order_text)
                
                return ADMIN_MENU
                
            elif text == self.get_text(language, "back_to_menu"):
                return await self.show_main_menu(update, context)
                
            else:
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                return ADMIN_MENU
                
        except Exception as e:
            logging.error(f"Error in handle_admin_menu: {str(e)}", exc_info=True)
            await update.message.reply_text(self.get_text(language, "error_message"))
            return await self.show_main_menu(update, context)

    async def handle_edit_product_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        text = update.message.text
        
        if text == "üîô –ù–∞–∑–∞–¥":
            return await self.show_admin_menu(update, context)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        product_name = text.replace("üìù ", "").split(" - ")[0]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        products = self.db.get_products()
        selected_product = None
        for product in products:
            if product['name_ru'] == product_name:
                selected_product = product
                break
        
        if not selected_product:
            await update.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ADMIN_MENU
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['editing_product_id'] = selected_product['id']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")],
            [KeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")],
            [KeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")],
            [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        product_info = (
            f"–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ RU: {selected_product['name_ru']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ UZ: {selected_product['name_uz']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ RU: {selected_product['description_ru']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ UZ: {selected_product['description_uz']}\n"
            f"–¶–µ–Ω–∞: {selected_product['price']} —Å—É–º\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        await update.message.reply_text(product_info, reply_markup=reply_markup)
        return EDIT_PRODUCT_ACTION

    async def handle_edit_product_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        text = update.message.text
        product_id = context.user_data.get('editing_product_id')
        
        if not product_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return await self.show_admin_menu(update, context)
        
        if text == "üîô –ù–∞–∑–∞–¥":
            return await self.handle_admin_menu(update, context)
        
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ RU\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ UZ"
            )
            context.user_data['edit_action'] = 'name'
            return EDIT_PRODUCT_INPUT
            
        elif text == "üìã –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ RU\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ UZ"
            )
            context.user_data['edit_action'] = 'description'
            return EDIT_PRODUCT_INPUT
            
        elif text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É":
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
            context.user_data['edit_action'] = 'price'
            return EDIT_PRODUCT_INPUT
            
        elif text == "üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            context.user_data['edit_action'] = 'photo'
            return EDIT_PRODUCT_INPUT
            
        elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
            keyboard = [
                [KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")],
                [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
                reply_markup=reply_markup
            )
            return EDIT_PRODUCT_CONFIRM_DELETE
        
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return EDIT_PRODUCT_ACTION

    async def handle_edit_product_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
        product_id = context.user_data.get('editing_product_id')
        edit_action = context.user_data.get('edit_action')
        
        if not product_id or not edit_action:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return await self.show_admin_menu(update, context)
        
        try:
            if edit_action == 'name':
                names = update.message.text.strip().split('\n')
                if len(names) != 2:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö")
                    return EDIT_PRODUCT_INPUT
                
                self.db.update_product(product_id, name_ru=names[0], name_uz=names[1])
                
            elif edit_action == 'description':
                descriptions = update.message.text.strip().split('\n')
                if len(descriptions) != 2:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö")
                    return EDIT_PRODUCT_INPUT
                
                self.db.update_product(product_id, description_ru=descriptions[0], description_uz=descriptions[1])
                
            elif edit_action == 'price':
                try:
                    price = float(update.message.text.strip())
                    self.db.update_product(product_id, price=price)
                except ValueError:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return EDIT_PRODUCT_INPUT
                
            elif edit_action == 'photo':
                if not update.message.photo:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
                    return EDIT_PRODUCT_INPUT
                
                photo_id = update.message.photo[-1].file_id
                self.db.update_product(product_id, photo_id=photo_id)
            
            await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            return await self.show_admin_menu(update, context)
            
        except Exception as e:
            logging.error(f"Error updating product: {str(e)}", exc_info=True)
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
            return await self.show_admin_menu(update, context)

    async def handle_edit_product_confirm_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        text = update.message.text
        product_id = context.user_data.get('editing_product_id')
        
        if not product_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return await self.show_admin_menu(update, context)
        
        if text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å":
            try:
                self.db.delete_product(product_id)
                await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            except Exception as e:
                logging.error(f"Error deleting product: {str(e)}", exc_info=True)
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        
        return await self.show_admin_menu(update, context)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            application = Application.builder().token(self.token).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conv_handler = ConversationHandler(
                entry_points=[CommandHandler('start', self.start)],
                states={
                    SELECTING_LANGUAGE: [
                        CallbackQueryHandler(self.select_language, pattern='^(ru|uz)$')
                    ],
                    MAIN_MENU: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_menu_selection)
                    ],
                    VIEWING_PRODUCTS: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_menu_selection),
                        CallbackQueryHandler(self.handle_product_button, pattern='^(increase|decrease)_[0-9]+$')
                    ],
                    CART: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_menu_selection)
                    ],
                    CHECKOUT_NAME: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_checkout_name)
                    ],
                    CHECKOUT_PHONE: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_checkout_phone),
                        MessageHandler(filters.CONTACT, self.handle_checkout_phone)
                    ],
                    CHECKOUT_ADDRESS: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_checkout_address),
                        MessageHandler(filters.LOCATION, self.handle_checkout_address)
                    ],
                    ADMIN_MENU: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_admin_menu)
                    ],
                    ADMIN_ADD_PRODUCT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_add_product)
                    ],
                    ADMIN_EDIT_PRODUCT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_admin_menu)
                    ],
                    ADMIN_VIEW_ORDERS: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_admin_menu)
                    ],
                    ADMIN_WAIT_PHOTO: [
                        MessageHandler(filters.PHOTO, self.handle_product_photo)
                    ],
                    EDIT_PRODUCT_SELECT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_edit_product_select)
                    ],
                    EDIT_PRODUCT_ACTION: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_edit_product_action)
                    ],
                    EDIT_PRODUCT_INPUT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_edit_product_input)
                    ],
                    EDIT_PRODUCT_CONFIRM_DELETE: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_edit_product_confirm_delete)
                    ]
                },
                fallbacks=[CommandHandler('start', self.start)]
            )

            application.add_handler(conv_handler)
            application.add_error_handler(self.error_handler)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logging.info("Starting bot...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logging.error(f"Error running bot: {str(e)}")
            raise

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    try:
        bot = EcommerceBot()
        bot.run()
    except Exception as e:
        logging.error(f"Fatal error: {str(e)}")
        raise
